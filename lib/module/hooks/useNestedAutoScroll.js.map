{"version":3,"names":["runOnJS","useAnimatedReaction","useDerivedValue","useSharedValue","useSafeNestableScrollContainerContext","SCROLL_POSITION_TOLERANCE","useNestedAutoScroll","params","outerScrollOffset","containerSize","scrollableRef","scrollViewSize","DUMMY_VAL","hoverOffset","activeCellSize","autoscrollSpeed","autoscrollThreshold","isDraggingCell","isTouchActiveNative","hoverScreenOffset","value","isScrolledUp","isScrolledDown","distToTopEdge","Math","max","distToBottomEdge","dist","isAtTopEdge","isAtBottomEdge","scrollTarget","cur","prev","scrollToInternal","y","_scrollableRef$curren","current","scrollTo","animated","isAtEdge","topDisabled","bottomDisabled","isEdgeDisabled","scrollTargetDiff","abs","scrollInProgress","shouldScroll","distFromEdge","speedPct","offset","targetOffset"],"sources":["useNestedAutoScroll.tsx"],"sourcesContent":["import Animated, {\n  runOnJS,\n  useAnimatedReaction,\n  useDerivedValue,\n  useSharedValue,\n} from \"react-native-reanimated\";\nimport { State as GestureState } from \"react-native-gesture-handler\";\nimport { useSafeNestableScrollContainerContext } from \"../context/nestableScrollContainerContext\";\nimport { SCROLL_POSITION_TOLERANCE } from \"../constants\";\n\n// This is mostly copied over from the main react-native-draggable-flatlist\n// useAutoScroll hook with a few notable exceptions:\n// - Since animated values are now coming in via a callback,\n//   we won't guarantee they exist (and default them if not).\n// - Outer scrollable is a ScrollView, not a FlatList\n// TODO: see if we can combine into a single shared `useAutoScroll()` hook\n\nexport function useNestedAutoScroll(params: {\n  activeCellSize?: Animated.SharedValue<number>;\n  autoscrollSpeed?: number;\n  autoscrollThreshold?: number;\n  hoverOffset?: Animated.SharedValue<number>;\n  isDraggingCell?: Animated.SharedValue<number>;\n  isTouchActiveNative?: Animated.SharedValue<number>;\n  panGestureState?: Animated.SharedValue<GestureState | number>;\n}) {\n  const {\n    outerScrollOffset,\n    containerSize,\n    scrollableRef,\n    scrollViewSize,\n  } = useSafeNestableScrollContainerContext();\n\n  const DUMMY_VAL = useSharedValue(0);\n\n  const {\n    hoverOffset = DUMMY_VAL,\n    activeCellSize = DUMMY_VAL,\n    autoscrollSpeed = 100,\n    autoscrollThreshold = 30,\n    isDraggingCell = DUMMY_VAL,\n    isTouchActiveNative = DUMMY_VAL,\n  } = params;\n\n  const hoverScreenOffset = useDerivedValue(() => {\n    return hoverOffset.value - outerScrollOffset.value;\n  }, []);\n\n  const isScrolledUp = useDerivedValue(() => {\n    return outerScrollOffset.value - SCROLL_POSITION_TOLERANCE <= 0;\n  }, []);\n\n  const isScrolledDown = useDerivedValue(() => {\n    return (\n      outerScrollOffset.value + containerSize.value + SCROLL_POSITION_TOLERANCE >=\n      scrollViewSize.value\n    );\n  }, []);\n\n  const distToTopEdge = useDerivedValue(() => {\n    return Math.max(0, hoverScreenOffset.value);\n  }, [hoverScreenOffset]);\n\n  const distToBottomEdge = useDerivedValue(() => {\n    const dist = containerSize.value - (hoverScreenOffset.value + activeCellSize.value)\n    return Math.max(0, dist);\n  }, [hoverScreenOffset, activeCellSize, containerSize]);\n\n  const isAtTopEdge = useDerivedValue(() => {\n    return distToTopEdge.value <= autoscrollThreshold;\n  }, []);\n\n  const isAtBottomEdge = useDerivedValue(() => {\n    return distToBottomEdge.value <= autoscrollThreshold;\n  });\n\n  const scrollTarget = useSharedValue(0);\n\n  useAnimatedReaction(\n    () => {\n      return isDraggingCell.value;\n    },\n    (cur, prev) => {\n      if (cur && !prev) {\n        scrollTarget.value = outerScrollOffset.value;\n      }\n    },\n    [activeCellSize]\n  );\n\n  function scrollToInternal(y: number) {\n    scrollableRef.current?.scrollTo({ y, animated: true });\n  }\n\n  useDerivedValue(() => {\n    const isAtEdge = isAtTopEdge.value || isAtBottomEdge.value;\n    const topDisabled = isAtTopEdge.value && isScrolledUp.value;\n    const bottomDisabled = isAtBottomEdge.value && isScrolledDown.value;\n    const isEdgeDisabled = topDisabled || bottomDisabled;\n\n    const scrollTargetDiff = Math.abs(scrollTarget.value - outerScrollOffset.value);\n    const scrollInProgress = scrollTargetDiff > SCROLL_POSITION_TOLERANCE;\n\n    const shouldScroll =\n      isAtEdge &&\n      !isEdgeDisabled &&\n      isDraggingCell.value &&\n      isTouchActiveNative.value &&\n      !scrollInProgress;\n\n    const distFromEdge = isAtTopEdge.value\n      ? distToTopEdge.value\n      : distToBottomEdge.value;\n    const speedPct = 1 - distFromEdge / autoscrollThreshold;\n    const offset = speedPct * autoscrollSpeed;\n    const targetOffset = isAtTopEdge.value\n      ? Math.max(0, outerScrollOffset.value - offset)\n      : outerScrollOffset.value + offset;\n    if (shouldScroll) {\n      scrollTarget.value = targetOffset;\n      // Reanimated scrollTo is crashing on android. use 'regular' scrollTo until figured out.\n      // scrollTo(scrollViewRef, 0, scrollTarget.value, true)\n      runOnJS(scrollToInternal)(targetOffset);\n    }\n  }, [autoscrollSpeed, autoscrollThreshold, isDraggingCell]);\n\n  return null;\n}\n"],"mappings":"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","ignoreList":[]}