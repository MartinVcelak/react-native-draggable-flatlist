{"version":3,"names":["useDerivedValue","withSpring","useAnimatedValues","useDraggableFlatListContext","useRefs","useCellTranslate","cellIndex","cellSize","cellOffset","activeIndexAnim","activeCellSize","hoverOffset","spacerIndexAnim","placeholderOffset","hoverAnim","viewableIndexMin","viewableIndexMax","activeKey","animationConfigRef","translate","isActiveCell","value","isOutsideViewableRange","isBeforeActive","isAfterActive","hoverPlusActiveSize","offsetPlusHalfSize","offsetPlusSize","result","newPlaceholderOffset","shouldTranslate","translationAmt"],"sources":["useCellTranslate.tsx"],"sourcesContent":["import Animated, { useDerivedValue, withSpring } from \"react-native-reanimated\";\nimport { useAnimatedValues } from \"../context/animatedValueContext\";\nimport { useDraggableFlatListContext } from \"../context/draggableFlatListContext\";\nimport { useRefs } from \"../context/refContext\";\n\ntype Params = {\n  cellIndex: number;\n  cellSize: Animated.SharedValue<number>;\n  cellOffset: Animated.SharedValue<number>;\n};\n\nexport function useCellTranslate({ cellIndex, cellSize, cellOffset }: Params) {\n  const {\n    activeIndexAnim,\n    activeCellSize,\n    hoverOffset,\n    spacerIndexAnim,\n    placeholderOffset,\n    hoverAnim,\n    viewableIndexMin,\n    viewableIndexMax,\n  } = useAnimatedValues();\n\n  const { activeKey } = useDraggableFlatListContext();\n\n  const { animationConfigRef } = useRefs();\n\n  const translate = useDerivedValue(() => {\n    const isActiveCell = cellIndex === activeIndexAnim.value;\n    const isOutsideViewableRange =\n      !isActiveCell &&\n      (cellIndex < viewableIndexMin.value ||\n        cellIndex > viewableIndexMax.value);\n    if (!activeKey || activeIndexAnim.value < 0 || isOutsideViewableRange) {\n      return 0;\n    }\n\n    // Determining spacer index is hard to visualize. See diagram: https://i.imgur.com/jRPf5t3.jpg\n    const isBeforeActive = cellIndex < activeIndexAnim.value;\n    const isAfterActive = cellIndex > activeIndexAnim.value;\n\n    const hoverPlusActiveSize = hoverOffset.value + activeCellSize.value;\n    const offsetPlusHalfSize = cellOffset.value + cellSize.value / 2;\n    const offsetPlusSize = cellOffset.value + cellSize.value;\n    let result = -1;\n\n    if (isAfterActive) {\n      if (\n        hoverPlusActiveSize >= cellOffset.value &&\n        hoverPlusActiveSize < offsetPlusHalfSize\n      ) {\n        // bottom edge of active cell overlaps top half of current cell\n        result = cellIndex - 1;\n      } else if (\n        hoverPlusActiveSize >= offsetPlusHalfSize &&\n        hoverPlusActiveSize < offsetPlusSize\n      ) {\n        // bottom edge of active cell overlaps bottom half of current cell\n        result = cellIndex;\n      }\n    } else if (isBeforeActive) {\n      if (\n        hoverOffset.value < offsetPlusSize &&\n        hoverOffset.value >= offsetPlusHalfSize\n      ) {\n        // top edge of active cell overlaps bottom half of current cell\n        result = cellIndex + 1;\n      } else if (\n        hoverOffset.value >= cellOffset.value &&\n        hoverOffset.value < offsetPlusHalfSize\n      ) {\n        // top edge of active cell overlaps top half of current cell\n        result = cellIndex;\n      }\n    }\n\n    if (result !== -1 && result !== spacerIndexAnim.value) {\n      spacerIndexAnim.value = result;\n    }\n\n    if (spacerIndexAnim.value === cellIndex) {\n      const newPlaceholderOffset = isAfterActive\n        ? cellSize.value + (cellOffset.value - activeCellSize.value)\n        : cellOffset.value;\n      placeholderOffset.value = newPlaceholderOffset;\n    }\n\n    // Active cell follows touch\n    if (isActiveCell) {\n      return hoverAnim.value;\n    }\n\n    // Translate cell down if it is before active index and active cell has passed it.\n    // Translate cell up if it is after the active index and active cell has passed it.\n\n    const shouldTranslate = isAfterActive\n      ? cellIndex <= spacerIndexAnim.value\n      : cellIndex >= spacerIndexAnim.value;\n\n    const translationAmt = shouldTranslate\n      ? activeCellSize.value * (isAfterActive ? -1 : 1)\n      : 0;\n\n    return withSpring(translationAmt, animationConfigRef.value);\n  }, [activeKey, cellIndex]);\n\n  return translate;\n}\n"],"mappings":"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","ignoreList":[]}