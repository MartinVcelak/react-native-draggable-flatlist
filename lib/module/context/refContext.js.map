{"version":3,"names":["React","useContext","useEffect","useMemo","useRef","useSharedValue","DEFAULT_PROPS","useProps","RefContext","createContext","undefined","RefProvider","children","flatListRef","value","useSetupRefs","createElement","Provider","useRefs","Error","flatListRefProp","props","animationConfig","propsRef","current","animConfig","animationConfigRef","cellDataRef","Map","keyToIndexRef","containerRef","flatlistRefInternal","flatlistRef","scrollViewRef","refs"],"sources":["refContext.tsx"],"sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport { useMemo, useRef } from \"react\";\nimport { FlatList } from \"react-native-gesture-handler\";\nimport Animated, { type SharedValue, useSharedValue, WithSpringConfig } from \"react-native-reanimated\";\nimport { DEFAULT_PROPS } from \"../constants\";\nimport { useProps } from \"./propsContext\";\nimport { CellData, DraggableFlatListProps } from \"../types\";\n\ntype RefContextValue<T> = {\n  propsRef: React.MutableRefObject<DraggableFlatListProps<T>>;\n  animationConfigRef: SharedValue<WithSpringConfig>;\n  cellDataRef: React.MutableRefObject<Map<string, CellData>>;\n  keyToIndexRef: React.MutableRefObject<Map<string, number>>;\n  containerRef: React.RefObject<Animated.View>;\n  flatlistRef: React.RefObject<FlatList<T>> | React.ForwardedRef<FlatList<T>>;\n  scrollViewRef: React.RefObject<Animated.ScrollView>;\n};\nconst RefContext = React.createContext<RefContextValue<any> | undefined>(\n  undefined\n);\n\nexport default function RefProvider<T>({\n  children,\n  flatListRef,\n}: {\n  children: React.ReactNode;\n  flatListRef?: React.ForwardedRef<FlatList<T>> | null;\n}) {\n  const value = useSetupRefs<T>({ flatListRef });\n  return <RefContext.Provider value={value}>{children}</RefContext.Provider>;\n}\n\nexport function useRefs<T>() {\n  const value = useContext(RefContext);\n  if (!value) {\n    throw new Error(\n      \"useRefs must be called from within a RefContext.Provider!\"\n    );\n  }\n  return value as RefContextValue<T>;\n}\n\nfunction useSetupRefs<T>({\n  flatListRef: flatListRefProp,\n}: {\n  flatListRef?: React.ForwardedRef<FlatList<T>> | null;\n}) {\n  const props = useProps<T>();\n  const { animationConfig = DEFAULT_PROPS.animationConfig } = props;\n\n  const propsRef = useRef(props);\n  propsRef.current = props;\n  const animConfig = useMemo(\n    () => ({\n      ...DEFAULT_PROPS.animationConfig,\n      ...animationConfig,\n    } as WithSpringConfig),\n    [animationConfig]\n  );\n\n  const animationConfigRef = useSharedValue(animConfig);\n  useEffect(() => {\n    animationConfigRef.value = animConfig;\n  }, [animConfig]);\n\n  const cellDataRef = useRef(new Map<string, CellData>());\n  const keyToIndexRef = useRef(new Map<string, number>());\n  const containerRef = useRef<Animated.View>(null);\n  const flatlistRefInternal = useRef<FlatList<T>>(null);\n  const flatlistRef = flatListRefProp || flatlistRefInternal;\n  const scrollViewRef = useRef<Animated.ScrollView>(null);\n\n  // useEffect(() => {\n  //   // This is a workaround for the fact that RN does not respect refs passed in\n  //   // to renderScrollViewComponent underlying ScrollView (currently not used but\n  //   // may need to add if we want to use reanimated scrollTo in the future)\n  //   //@ts-ignore\n  //   const scrollRef = flatlistRef.current?.getNativeScrollRef();\n  //   if (!scrollViewRef.current) {\n  //     //@ts-ignore\n  //     scrollViewRef(scrollRef);\n  //   }\n  // }, []);\n\n  const refs = useMemo(\n    () => ({\n      animationConfigRef,\n      cellDataRef,\n      containerRef,\n      flatlistRef,\n      keyToIndexRef,\n      propsRef,\n      scrollViewRef,\n    }),\n    []\n  );\n\n  return refs;\n}\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACpD,SAASC,OAAO,EAAEC,MAAM,QAAQ,OAAO;AAEvC,SAAqCC,cAAc,QAA0B,yBAAyB;AACtG,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,QAAQ,QAAQ,gBAAgB;AAYzC,MAAMC,UAAU,gBAAGR,KAAK,CAACS,aAAa,CACpCC,SACF,CAAC;AAED,eAAe,SAASC,WAAWA,CAAI;EACrCC,QAAQ;EACRC;AAIF,CAAC,EAAE;EACD,MAAMC,KAAK,GAAGC,YAAY,CAAI;IAAEF;EAAY,CAAC,CAAC;EAC9C,oBAAOb,KAAA,CAAAgB,aAAA,CAACR,UAAU,CAACS,QAAQ;IAACH,KAAK,EAAEA;EAAM,GAAEF,QAA8B,CAAC;AAC5E;AAEA,OAAO,SAASM,OAAOA,CAAA,EAAM;EAC3B,MAAMJ,KAAK,GAAGb,UAAU,CAACO,UAAU,CAAC;EACpC,IAAI,CAACM,KAAK,EAAE;IACV,MAAM,IAAIK,KAAK,CACb,2DACF,CAAC;EACH;EACA,OAAOL,KAAK;AACd;AAEA,SAASC,YAAYA,CAAI;EACvBF,WAAW,EAAEO;AAGf,CAAC,EAAE;EACD,MAAMC,KAAK,GAAGd,QAAQ,CAAI,CAAC;EAC3B,MAAM;IAAEe,eAAe,GAAGhB,aAAa,CAACgB;EAAgB,CAAC,GAAGD,KAAK;EAEjE,MAAME,QAAQ,GAAGnB,MAAM,CAACiB,KAAK,CAAC;EAC9BE,QAAQ,CAACC,OAAO,GAAGH,KAAK;EACxB,MAAMI,UAAU,GAAGtB,OAAO,CACxB,OAAO;IACL,GAAGG,aAAa,CAACgB,eAAe;IAChC,GAAGA;EACL,CAAC,CAAqB,EACtB,CAACA,eAAe,CAClB,CAAC;EAED,MAAMI,kBAAkB,GAAGrB,cAAc,CAACoB,UAAU,CAAC;EACrDvB,SAAS,CAAC,MAAM;IACdwB,kBAAkB,CAACZ,KAAK,GAAGW,UAAU;EACvC,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAME,WAAW,GAAGvB,MAAM,CAAC,IAAIwB,GAAG,CAAmB,CAAC,CAAC;EACvD,MAAMC,aAAa,GAAGzB,MAAM,CAAC,IAAIwB,GAAG,CAAiB,CAAC,CAAC;EACvD,MAAME,YAAY,GAAG1B,MAAM,CAAgB,IAAI,CAAC;EAChD,MAAM2B,mBAAmB,GAAG3B,MAAM,CAAc,IAAI,CAAC;EACrD,MAAM4B,WAAW,GAAGZ,eAAe,IAAIW,mBAAmB;EAC1D,MAAME,aAAa,GAAG7B,MAAM,CAAsB,IAAI,CAAC;;EAEvD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM8B,IAAI,GAAG/B,OAAO,CAClB,OAAO;IACLuB,kBAAkB;IAClBC,WAAW;IACXG,YAAY;IACZE,WAAW;IACXH,aAAa;IACbN,QAAQ;IACRU;EACF,CAAC,CAAC,EACF,EACF,CAAC;EAED,OAAOC,IAAI;AACb","ignoreList":[]}