{"version":3,"names":["React","useRef","useDraggableFlatListContext","useRefs","useStableCallback","typedMemo","RowItem","props","propsRef","current","activeKey","activeKeyRef","keyToIndexRef","drag","itemKey","debug","console","log","renderItem","item","extraData","getIndex","get","createElement","MemoizedInner","isActive","Inner","rest"],"sources":["RowItem.tsx"],"sourcesContent":["import React, { useRef } from \"react\";\nimport { useDraggableFlatListContext } from \"../context/draggableFlatListContext\";\nimport { useRefs } from \"../context/refContext\";\nimport { useStableCallback } from \"../hooks/useStableCallback\";\nimport { RenderItem } from \"../types\";\nimport { typedMemo } from \"../utils\";\n\ntype Props<T> = {\n  extraData?: any;\n  drag: (itemKey: string) => void;\n  item: T;\n  renderItem: RenderItem<T>;\n  itemKey: string;\n  debug?: boolean;\n};\n\nfunction RowItem<T>(props: Props<T>) {\n  const propsRef = useRef(props);\n  propsRef.current = props;\n\n  const { activeKey } = useDraggableFlatListContext();\n  const activeKeyRef = useRef(activeKey);\n  activeKeyRef.current = activeKey;\n  const { keyToIndexRef } = useRefs();\n\n  const drag = useStableCallback(() => {\n    const { drag, itemKey, debug } = propsRef.current;\n    if (activeKeyRef.current) {\n      // already dragging an item, noop\n      if (debug)\n        console.log(\n          \"## attempt to drag item while another item is already active, noop\"\n        );\n    }\n    drag(itemKey);\n  });\n\n  const { renderItem, item, itemKey, extraData } = props;\n\n  const getIndex = useStableCallback(() => {\n    return keyToIndexRef.current.get(itemKey);\n  });\n\n  return (\n    <MemoizedInner\n      isActive={activeKey === itemKey}\n      drag={drag}\n      renderItem={renderItem}\n      item={item}\n      getIndex={getIndex}\n      extraData={extraData}\n    />\n  );\n}\n\nexport default typedMemo(RowItem);\n\ntype InnerProps<T> = {\n  isActive: boolean;\n  item: T;\n  getIndex: () => number | undefined;\n  drag: () => void;\n  renderItem: RenderItem<T>;\n  extraData?: any;\n};\n\nfunction Inner<T>({ renderItem, extraData, ...rest }: InnerProps<T>) {\n  return renderItem({ ...rest }) as JSX.Element;\n}\n\nconst MemoizedInner = typedMemo(Inner);\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,SAASC,2BAA2B,QAAQ,qCAAqC;AACjF,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,iBAAiB,QAAQ,4BAA4B;AAE9D,SAASC,SAAS,QAAQ,UAAU;AAWpC,SAASC,OAAOA,CAAIC,KAAe,EAAE;EACnC,MAAMC,QAAQ,GAAGP,MAAM,CAACM,KAAK,CAAC;EAC9BC,QAAQ,CAACC,OAAO,GAAGF,KAAK;EAExB,MAAM;IAAEG;EAAU,CAAC,GAAGR,2BAA2B,CAAC,CAAC;EACnD,MAAMS,YAAY,GAAGV,MAAM,CAACS,SAAS,CAAC;EACtCC,YAAY,CAACF,OAAO,GAAGC,SAAS;EAChC,MAAM;IAAEE;EAAc,CAAC,GAAGT,OAAO,CAAC,CAAC;EAEnC,MAAMU,IAAI,GAAGT,iBAAiB,CAAC,MAAM;IACnC,MAAM;MAAES,IAAI;MAAEC,OAAO;MAAEC;IAAM,CAAC,GAAGP,QAAQ,CAACC,OAAO;IACjD,IAAIE,YAAY,CAACF,OAAO,EAAE;MACxB;MACA,IAAIM,KAAK,EACPC,OAAO,CAACC,GAAG,CACT,oEACF,CAAC;IACL;IACAJ,IAAI,CAACC,OAAO,CAAC;EACf,CAAC,CAAC;EAEF,MAAM;IAAEI,UAAU;IAAEC,IAAI;IAAEL,OAAO;IAAEM;EAAU,CAAC,GAAGb,KAAK;EAEtD,MAAMc,QAAQ,GAAGjB,iBAAiB,CAAC,MAAM;IACvC,OAAOQ,aAAa,CAACH,OAAO,CAACa,GAAG,CAACR,OAAO,CAAC;EAC3C,CAAC,CAAC;EAEF,oBACEd,KAAA,CAAAuB,aAAA,CAACC,aAAa;IACZC,QAAQ,EAAEf,SAAS,KAAKI,OAAQ;IAChCD,IAAI,EAAEA,IAAK;IACXK,UAAU,EAAEA,UAAW;IACvBC,IAAI,EAAEA,IAAK;IACXE,QAAQ,EAAEA,QAAS;IACnBD,SAAS,EAAEA;EAAU,CACtB,CAAC;AAEN;AAEA,eAAef,SAAS,CAACC,OAAO,CAAC;AAWjC,SAASoB,KAAKA,CAAI;EAAER,UAAU;EAAEE,SAAS;EAAE,GAAGO;AAAoB,CAAC,EAAE;EACnE,OAAOT,UAAU,CAAC;IAAE,GAAGS;EAAK,CAAC,CAAC;AAChC;AAEA,MAAMH,aAAa,GAAGnB,SAAS,CAACqB,KAAK,CAAC","ignoreList":[]}