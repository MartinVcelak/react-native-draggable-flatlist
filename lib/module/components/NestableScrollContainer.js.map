{"version":3,"names":["React","ScrollView","Animated","useAnimatedScrollHandler","NestableScrollContainerProvider","useSafeNestableScrollContainerContext","useStableCallback","AnimatedScrollView","createAnimatedComponent","NestableScrollContainerInner","props","outerScrollOffset","containerSize","scrollViewSize","scrollableRef","outerScrollEnabled","onScroll","contentOffset","value","y","onLayout","event","nativeEvent","layout","height","onContentSizeChange","w","h","_props$onContentSizeC","call","createElement","_extends","scrollEnabled","ref","scrollEventThrottle","NestableScrollContainer","forwardRef","forwardedRef","undefined"],"sources":["NestableScrollContainer.tsx"],"sourcesContent":["import React from \"react\";\nimport { LayoutChangeEvent, ScrollViewProps } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport Animated, { useAnimatedScrollHandler } from \"react-native-reanimated\";\nimport {\n  NestableScrollContainerProvider,\n  useSafeNestableScrollContainerContext,\n} from \"../context/nestableScrollContainerContext\";\nimport { useStableCallback } from \"../hooks/useStableCallback\";\n\nconst AnimatedScrollView = Animated.createAnimatedComponent(ScrollView);\n\nfunction NestableScrollContainerInner(props: ScrollViewProps) {\n  const {\n    outerScrollOffset,\n    containerSize,\n    scrollViewSize,\n    scrollableRef,\n    outerScrollEnabled,\n  } = useSafeNestableScrollContainerContext();\n\n  const onScroll = useAnimatedScrollHandler({\n    onScroll: ({ contentOffset }) => {\n      outerScrollOffset.value = contentOffset.y;\n    },\n  });\n\n  const onLayout = useStableCallback((event: LayoutChangeEvent) => {\n    const {\n      nativeEvent: { layout },\n    } = event;\n    containerSize.value = layout.height;\n  });\n\n  const onContentSizeChange = useStableCallback((w: number, h: number) => {\n    scrollViewSize.value = h;\n    props.onContentSizeChange?.(w, h);\n  });\n\n  return (\n    <AnimatedScrollView\n      {...props}\n      onLayout={onLayout}\n      onContentSizeChange={onContentSizeChange}\n      scrollEnabled={outerScrollEnabled}\n      ref={scrollableRef}\n      scrollEventThrottle={1}\n      onScroll={onScroll}\n    />\n  );\n}\n\nexport const NestableScrollContainer = React.forwardRef(\n  (props: ScrollViewProps, forwardedRef?: React.ForwardedRef<ScrollView>) => {\n    return (\n      <NestableScrollContainerProvider\n        forwardedRef={\n          (forwardedRef as React.MutableRefObject<ScrollView>) || undefined\n        }\n      >\n        <NestableScrollContainerInner {...props} />\n      </NestableScrollContainerProvider>\n    );\n  }\n);\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,UAAU,QAAQ,8BAA8B;AACzD,OAAOC,QAAQ,IAAIC,wBAAwB,QAAQ,yBAAyB;AAC5E,SACEC,+BAA+B,EAC/BC,qCAAqC,QAChC,2CAA2C;AAClD,SAASC,iBAAiB,QAAQ,4BAA4B;AAE9D,MAAMC,kBAAkB,GAAGL,QAAQ,CAACM,uBAAuB,CAACP,UAAU,CAAC;AAEvE,SAASQ,4BAA4BA,CAACC,KAAsB,EAAE;EAC5D,MAAM;IACJC,iBAAiB;IACjBC,aAAa;IACbC,cAAc;IACdC,aAAa;IACbC;EACF,CAAC,GAAGV,qCAAqC,CAAC,CAAC;EAE3C,MAAMW,QAAQ,GAAGb,wBAAwB,CAAC;IACxCa,QAAQ,EAAEA,CAAC;MAAEC;IAAc,CAAC,KAAK;MAC/BN,iBAAiB,CAACO,KAAK,GAAGD,aAAa,CAACE,CAAC;IAC3C;EACF,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAGd,iBAAiB,CAAEe,KAAwB,IAAK;IAC/D,MAAM;MACJC,WAAW,EAAE;QAAEC;MAAO;IACxB,CAAC,GAAGF,KAAK;IACTT,aAAa,CAACM,KAAK,GAAGK,MAAM,CAACC,MAAM;EACrC,CAAC,CAAC;EAEF,MAAMC,mBAAmB,GAAGnB,iBAAiB,CAAC,CAACoB,CAAS,EAAEC,CAAS,KAAK;IAAA,IAAAC,qBAAA;IACtEf,cAAc,CAACK,KAAK,GAAGS,CAAC;IACxB,CAAAC,qBAAA,GAAAlB,KAAK,CAACe,mBAAmB,cAAAG,qBAAA,uBAAzBA,qBAAA,CAAAC,IAAA,CAAAnB,KAAK,EAAuBgB,CAAC,EAAEC,CAAC,CAAC;EACnC,CAAC,CAAC;EAEF,oBACE3B,KAAA,CAAA8B,aAAA,CAACvB,kBAAkB,EAAAwB,QAAA,KACbrB,KAAK;IACTU,QAAQ,EAAEA,QAAS;IACnBK,mBAAmB,EAAEA,mBAAoB;IACzCO,aAAa,EAAEjB,kBAAmB;IAClCkB,GAAG,EAAEnB,aAAc;IACnBoB,mBAAmB,EAAE,CAAE;IACvBlB,QAAQ,EAAEA;EAAS,EACpB,CAAC;AAEN;AAEA,OAAO,MAAMmB,uBAAuB,gBAAGnC,KAAK,CAACoC,UAAU,CACrD,CAAC1B,KAAsB,EAAE2B,YAA6C,KAAK;EACzE,oBACErC,KAAA,CAAA8B,aAAA,CAAC1B,+BAA+B;IAC9BiC,YAAY,EACTA,YAAY,IAA2CC;EACzD,gBAEDtC,KAAA,CAAA8B,aAAA,CAACrB,4BAA4B,EAAKC,KAAQ,CACX,CAAC;AAEtC,CACF,CAAC","ignoreList":[]}